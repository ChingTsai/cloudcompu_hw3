import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.hadoop.fs.FileSystem
import org.apache.hadoop.fs.Path
import org.apache.hadoop.io.NullWritable

import org.apache.spark._
import org.apache.spark.SparkContext._
import org.apache.spark.HashPartitioner

object InvertedIdx {
  def main(args: Array[String]) {

    val filePath = args(0)

    val outputPath = args(1)

    val conf = new SparkConf().setAppName("InvertedIdx")
    val sc = new SparkContext(conf)

    // Cleanup output dir
    val hadoopConf = sc.hadoopConfiguration
    var hdfs = FileSystem.get(hadoopConf)
    try { hdfs.delete(new Path(outputPath), true) } catch { case _: Throwable => {} }

    sc.textFile(filePath, sc.defaultParallelism * 10)
    .map(line => {
        val lineXml = scala.xml.XML.loadString(line.toString())
        (  ((lineXml \ "title").text.concat("&gt").concat((lineXml \ "revision" \ "text").text)));
      })
      .saveAsHadoopFile("output/path", classOf[String], classOf[String],classOf[RDDMultipleTextOutputFormat])

    sc.stop
  }
}